;
; CBIOS FOR CPM8266
; Copyright (c) 2017 Mats Engstrom, SmallRoomLabs
;
; Some parts are from the original skeletal BIOS code
; Copyright (c) 1980 Digital Research
;

	include "MEMLOCS.Z80"
	org	START_BIOSCODE

vers:	equ	22	; version 2.2
CR:     equ     0dh     ; Carriage Return
LF:     equ     0ah     ; Line Feed

;
; Command codes that are sent to the emulator via a OUT (xxx),A instruction
; to handle the BIOS low level console & disk I/O emulation
;
EMU_EXIT:	equ	00h
EMU_CONOUT:	equ	01h
EMU_LIST:	equ	02h
EMU_PUNCH:	equ	03h
EMU_CONIN:	equ	04h
EMU_CONST:	equ	05h
EMU_SETDMA:	equ	06h
EMU_SETTRK:	equ	07h
EMU_SETSEC:	equ	08h
EMU_HOME:	equ	09h
EMU_SETDSK:	equ	0Ah
EMU_READ:	equ	0Bh
EMU_WRITE:	equ	0Ch

;
; perform following functions
;-----------------------------------------------
; boot		Cold start
; wboot		Warm start (save i/o byte)
; const		Console status
;			reg-a = 00 if no character ready
;			reg-a = ff if character ready
; conin		Console character in (result in reg-a)
; conOUT	Console character out (char in reg-c)
; list		List out (char in reg-c)
; punch		Punch out (char in reg-c)
; reader	Paper tape reader in (result to reg-a)
; home		Move to track 00
;
; seldsk	Select disk given by reg-c (0,1,2...)
; settrk	Set track address (0...76) for subsequent read/write
; setsec	Set sector address (1...26) for subsequent read/write
; setdma	Set subsequent dma address (initially 80h)
;
;		(Read and write assume previous calls to set up paras)
; read		Read track/sector to preset dma address
; write		Write track/sector from preset dma address
;

; Jump vectors for indiviual routines
BOOT:	JP	boot_
WBOOT:	JP	wboot_
CONST:	JP	const_
CONIN:	JP	conin_
CONOUT:	JP	conout_
LIST:	JP	list_
PUNCH:	JP	punch_
READER:	JP	reader_
HOME:	JP	home_
SELDSK:	JP	seldsk_
SETTRK:	JP	settrk_
SETSEC:	JP	setsec_
SETDMA:	JP	setdma_
READ:	JP	read_
WRITE:	JP	write_
LISTST:	JP	listst_
SECTRN:	JP	sectran_

;
; XLT	Address of the logical-to-physical translation vector, if used for
;		this particular drive, or the value 0000H if no sector translation
;		takes place (that is, the physical and logical sector numbers are
;		the same). Disk drives with identical sector skew factors share the
;		same translate tables.
;
; 0000	Scratch pad value for use within the BDOS.
; 0000	Scratch pad value for use within the BDOS.
; 0000	Scratch pad value for use within the BDOS.
; DIRBUF Address of a 128-byte scratch pad area for directory operations
;		within BDOS. All DPHs address the same scratch pad area.
; DPB	Address of a disk parameter block for this drive. Drives with
;		identical disk characteristics address the same disk parameter block.
; CSV	Address of a scratch pad area used for software check for changed
;		disks. This address is different for each DPH.
; ALV	Address of a scratch pad area used by the BDOS to keep disk storage
;		allocation information. This address is different for each DPH.
;

;
; Fixed data tables for fifteen standard ibm-compatible 8" disks
;

ndisks:	equ	15	; We have 15 disks drives (A..O) in this system

;		XLT   Scratch  DIRBUF DPB    CSV    ALV
dpbase:	defw	trans, 0,0,0,  dirbf, dpblk, chkA, allA	; Disk A
	defw	trans, 0,0,0,  dirbf, dpblk, chkB, allB	; Disk B
	defw	trans, 0,0,0,  dirbf, dpblk, chkC, allC	; Disk C
	defw	trans, 0,0,0,  dirbf, dpblk, chkD, allD	; Disk D
	defw	trans, 0,0,0,  dirbf, dpblk, chkE, allE	; Disk E
	defw	trans, 0,0,0,  dirbf, dpblk, chkF, allF	; Disk F
	defw	trans, 0,0,0,  dirbf, dpblk, chkG, allG	; Disk G
	defw	trans, 0,0,0,  dirbf, dpblk, chkH, allH	; Disk H
	defw	trans, 0,0,0,  dirbf, dpblk, chkI, allI	; Disk I
	defw	trans, 0,0,0,  dirbf, dpblk, chkJ, allJ	; Disk J
	defw	trans, 0,0,0,  dirbf, dpblk, chkK, allK	; Disk K
	defw	trans, 0,0,0,  dirbf, dpblk, chkL, allL	; Disk L
	defw	trans, 0,0,0,  dirbf, dpblk, chkM, allM	; Disk M
	defw	trans, 0,0,0,  dirbf, dpblk, chkN, allN	; Disk N
	defw	trans, 0,0,0,  dirbf, dpblk, chkO, allO	; Disk O

; Sector translate vectors
trans:	defm	 1,  2,  3,  4	; Sectors  1,  2,  3,  4
	defm	 5,  6,  7,  8	; Sectors  5,  6,  7,  6
	defm	 9, 10, 11, 12	; Sectors  9, 10, 11, 12
	defm	13, 14, 15, 16	; Sectors 13, 14, 15, 16
	defm	17, 18, 19, 20	; Sectors 17, 18, 19, 20
	defm	21, 22, 23, 24	; Sectors 21, 22, 23, 24
	defm	25, 26		; Sectors 25, 26
;trans:	defm	 1,  7, 13, 19	; Sectors  1,  2,  3,  4
;	defm	25,  5, 11, 17	; Sectors  5,  6,  7,  6
;	defm	23,  3,  9, 15	; Sectors  9, 10, 11, 12
;	defm	21,  2,  8, 14	; Sectors 13, 14, 15, 16
;	defm	20, 26,  6, 12	; Sectors 17, 18, 19, 20
;	defm	18, 24,  4, 10	; Sectors 21, 22, 23, 24
;	defm	16, 22		; Sectors 25, 26

;
; *SPT	Total number of sectors per track.
;
; *BSH	Data allocation block shift factor, determined by the data
;       block allocation size.
;
; *BLM	Data allocation block mask (2[BSH-1]).
;
; *EXM	Extent mask, determined by the data block allocation size
;	and the number of disk blocks.
;
; *DSM	Total storage capacity of the disk drive.
;
; *DRM	Total number of directory entries that can be stored on
;	this drive.
;
; *AL0/AL1 Reserved directory blocks.
;
; *CKS	Size of the directory check vector.
;
; *OFF	Number of reserved tracks at the beginning of the disk.
;

;
; Disk parameter block common for all disks.
;
dpblk:	defw	26	; SPT - sectors per track
	defm	3	; BSH - block shift factor
	defm	7	; BLM - block mask
	defm	0	; EXM - null mask
	defw	242	; DSM - disk size-1
	defw	63	; DRM - directory max
	defm	192	; AL0 - alloc 0
	defm	0	; AL1 - alloc 1
	defw	0	; CKS - check size
	defw	2	; OFF - track offset


signon:	db	CR,LF,LF
	db	48+(RAMSIZEK/10)
	db	48+(RAMSIZEK-((RAMSIZEK/10)*10))
	db	'K CP/M v'
	db	48+(vers/10), '.' 
	db	48+(vers-((vers/10)*10))
	db	' [cpm8266 v'
	db	48+(VERSION/10), '.' 
	db	48+(VERSION-((VERSION/10)*10))
	db	' - SmallRoomLabs]'
	db	CR,LF,0

;****************************************************************************
; BOOT
; Print signon message and go to ccp
;****************************************************************************
boot_:	
	LD	SP,TBUFF	;
	LD	HL,signon	; Print cold boot message
	CALL	prmsg
	XOR	A		; Clear accumulator
	LD	(TDRIVE),A	; Set Disk A, User 0 as default
	LD	(IOBYTE),A	;
	JP	gocpm		; Go to cp/m

;****************************************************************************
; WBOOT
; loader on track 0, sector 1, which will be skipped for warm read cp/m
; from disk assuming there is a 128 byte cold start start.
;****************************************************************************
wboot_:	
	LD	SP,TBUFF	; using dma - thus 80 thru ff available for stack
	LD	BC,2			; B=TRACK 0, C=SECTOR 2
	LD	D,44			; D=# SECTORS TO LOAD
	LD	HL,START_CCPCODE	; HL=BASE TRANSFER ADDRESS
LoadSector:
	PUSH	BC			; Save BC
	OUT	(EMU_SETSEC),A		; arg is C,  data in C
	LD	C,0
	OUT	(EMU_SETDSK),A		; arg is C,  data=0
	LD	C,B
	OUT	(EMU_SETTRK),A		; arg is C,  data in B
	LD	B,H
	LD	C,L
	OUT	(EMU_SETDMA),A		; arg is BC, data in HL
	OUT	(EMU_READ),A		; No args
	POP	BC			; Restore BC
	; GO TO NEXT SECTOR IF LOAD IS INCOMPLETE
	DEC	D			; SECTS=SECTS-1
	JP	Z,wbdone		; All sectors loaded, done here
	; MORE SECTORS TO LOAD
	LD	SP,128			; 128 BYTES PER SECTOR
	ADD	HL,SP			; HL=HL+128
	INC	C			; SECTOR=SECTOR+1
	LD	A,C
	CP	27			; LAST SECTOR OF TRACK?
	JP	C,LoadSector		; NO, GO READ ANOTHER
	;END OF TRACK, INCREMENT TO NEXT TRACK
	LD	C,1			; SECTOR=1
	INC	B			; TRACK=TRACK+1
	JP	LoadSector		; FOR ANOTHER GROUP

wbdone:	;LD	HL,bootmsg		; Print warm boot message
	;CALL	prmsg

gocpm:	;(enter here from cold & warm start boots)
	LD	BC,TBUFF		; Set default buffer address to 80h
	CALL	setdma_

;	reset monitor entry points
	LD	A,0C3h		; C3h is the Z80 instruction JP

	LD	(0),A		; Patch in a JP to ...
	LD	HL,WBOOT	; ... WBOOT at ....
	LD	(1),HL		; ... location 0000

	LD	(5),A		; Patch in a JP to ...
	LD	HL,START_BDOSCODE+6 ; ... the BDOS entry at ...
	LD	(6),HL		; ... location 0005

	LD	A,(TDRIVE)	; last logged disk number
	LD	C,A		;send to ccp to log it in

	JP	START_CCPCODE	; Finally goto the CCP and start CP/M

;****************************************************************************
; CONST
; Console status to reg-a
;****************************************************************************
const_:	
	OUT	(EMU_CONST),A
	RET

;****************************************************************************
; CONIN
; Console character input to A
;****************************************************************************
conin_:	
	OUT	(EMU_CONIN),A
	RET

;****************************************************************************
; CONOUT
; Console device output character in A
;****************************************************************************
conout_:
	OUT	(EMU_CONOUT),A
	RET

;****************************************************************************
; LIST
; List device output character in A
;****************************************************************************
list_:	
	OUT	(EMU_LIST),A
	RET

;****************************************************************************
; LISTST
; Return list status in A
;****************************************************************************
listst_:	
	XOR	A	; Always not ready
	RET

;****************************************************************************
; PUNCH
; Punch device output character in A
;****************************************************************************
punch_:	
	OUT	(EMU_PUNCH),A
	RET

;****************************************************************************
; READER
; Reader character input to A
;****************************************************************************
reader_:		; TODO
	
	RET

;
;****************************************************************************
; HOME
; Move disk to home position
;****************************************************************************
home_:	
	OUT	(EMU_HOME),A
	RET

;****************************************************************************
; SELDSK
; Select disk given by register C
;****************************************************************************
seldsk_:	
	LD	HL,0000h	; Return 0000 if error
	LD	A,C
	CP	ndisks		; Too large?
	RET	NC		; Leave HL = 0000

	OUT	(EMU_SETDSK),A

	LD	L,C
	LD	H,0		; HL=disk number
	ADD	HL,HL		; *2
	ADD	HL,HL		; *4
	ADD	HL,HL		; *8
	ADD	HL,HL		; *16
	LD	DE,dpbase
	ADD	HL,DE		; HL=disk header table address
	RET

;****************************************************************************
; SETTRK
; Set track address given by C
;****************************************************************************
settrk_:	
	LD	HL,iot		; Update interal variabe...
	LD	(HL),C
	OUT	(EMU_SETTRK),A	; ...and send to emulator
	RET

;****************************************************************************
; SETSEC
; Set sector number given by C
;****************************************************************************
setsec_:
	LD	HL,ios		; Ppdate interal variabe...
	LD	(HL),C
	OUT	(EMU_SETSEC),A	; ...and send to emulator
	RET

;****************************************************************************
; SECTRAN
; Translate sector BC using table at DE
;****************************************************************************
sectran_:
	LD	A,D		; Do we have a translation table?
	OR	E
	JP	NZ,SECT1	; Yes, translate
	LD	L,C		; No, return untranslated
	LD	H,B		; in HL
	INC	L		; Sector no. start with 1
	RET	NZ
	INC	H
	RET
SECT1:	EX	DE,HL		; HL=.trans
	ADD	HL,BC		; HL=.trans(sector)
	LD	L,(HL)		; L = trans(sector)
	LD	H,0		; HL= trans(sector)
	RET			; with value in HL

;****************************************************************************
; SETDMA
; set dma address given by regs b,c
;****************************************************************************
setdma_:
	LD	L,C
	LD	H,B
	LD	(iod),HL
	OUT	(EMU_SETDMA),A
	RET

;****************************************************************************
; READ
; read next disk record (disk/trk/sec/dma set)
;****************************************************************************
read_:
	OUT	(EMU_READ),A
	RET			; May have error set in A

;****************************************************************************
; WRITE
;****************************************************************************
write_:
	OUT	(EMU_WRITE),A
	RET			; May have error set


;
; Print message at HL until 0
;
prmsg:	LD	A,(HL)
	OR	A		; Check if got zero?
	RET	Z		; If zero return to caller
	PUSH	HL		; else print the character
	LD	C,A
	CALL	conout_
	POP	HL
	INC	HL
	JP	prmsg

;
; Data areas (must be in RAM)
;
	org START_BIOSDATA

iot:	ds	1	;track number (was db offset)
ios:	ds	1	;sector number (was db 1)
iod:	ds	2	;io address (was dw buff)

dirbf:	ds	128	;DIRECTORY ACCESS BUFFER

chkA:	ds	16	; A Drive
allA:	ds	31
chkB:	ds	16	; B Drive
allB:	ds	31
chkC:	ds	16	; C Drive
allC:	ds	31
chkD:	ds	16	; D Drive
allD:	ds	31
chkE:	ds	16	; E Drive
allE:	ds	31
chkF:	ds	16	; F Drive
allF:	ds	31
chkG:	ds	16	; G Drive
allG:	ds	31
chkH:	ds	16	; H Drive
allH:	ds	31
chkI:	ds	16	; I Drive
allI:	ds	31
chkJ:	ds	16	; J Drive
allJ:	ds	31
chkK:	ds	16	; K Drive
allK:	ds	31
chkL:	ds	16	; L Drive
allL:	ds	31
chkM:	ds	16	; M Drive
allM:	ds	31
chkN:	ds	16	; N Drive
allN:	ds	31
chkO:	ds	16	; O Drive
allO:	ds	31

	END	